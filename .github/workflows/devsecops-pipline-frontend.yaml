name: DevSecOps Pipeline Frontend-app
  
env:
  BUILD_NUMBER: ${{ github.run_number }}
  IMAGE_NAME: frontend-image
  VITE_API_URL: https://api.36.lebondeveloppeur.net

on:
  push:
    branches:
      - main

jobs:

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --force

      - name: Run unit tests
        run: npm test
        
  sast-scan:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/default"

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sca-scan:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "frontend-app"
          path: "."
          format: "HTML"
          out: "reports"
          args: "--noupdate"

      - name: Upload dependency-check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html

  docker-image-scan:
    runs-on: ubuntu-latest
    needs: [sast-scan, sca-scan]
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} --build-arg VITE_API_URL=${{ env.VITE_API_URL }} .

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: table
          exit-code: 0
          ignore-unfixed: true
          
  build-and-push-job:
    runs-on: ubuntu-latest
    needs: ["test-job"]
    steps:

      - name: Clone Source Code 
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} --build-arg VITE_API_URL=${{ env.VITE_API_URL }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker Image with Specific Version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}
      
      - name: Push Docker Image with Specific Version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Tag Docker Image with Latest Version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image with Latest Version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-job:
    runs-on: ubuntu-latest
    needs: ["build-and-push-job"]
    steps: 

      - name: Connect to the VPS Using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: | 
              cd /home/user/devops-scripts/app
              sudo git pull
              sudo docker-compose pull
              sudo docker-compose up -d --force-recreate --remove-orphans
              
    dast-scan:
    runs-on: ubuntu-latest
    needs: deploy-job 
    permissions:
      security-events: write
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://app.36.lebondeveloppeur.net/'
          docker_options: "--user $(id -u):$(id -g)"
          fail_action: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap_reports
          path: |
            report_*.json
            report_*.html
          retention-days: 2