name: DevSecOps Pipeline Frontend-app

env:
  BUILD_NUMBER: ${{ github.run_number }}
  IMAGE_NAME: frontend-image
  VITE_API_URL: http://localhost:3001

on:
  push:
    branches:
      - main

jobs:
  test-job:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --force

      - name: Run unit tests
        run: npm test

  # sast-scan:
  #   runs-on: ubuntu-latest
  #   needs: test-job
  #   timeout-minutes: 10
  #   env:
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     SONAR_HOST_URL: https://sonarcloud.io
  #   steps:
  #     - name: Clone Source Code
  #       uses: actions/checkout@v4

  #     - name: Run Semgrep (SAST)
  #       uses: returntocorp/semgrep-action@v1
  #       with:
  #         config: "p/default"

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       with:
  #         args: >
  #           -Dsonar.projectKey=salma1-spec_frontend-app
  #           -Dsonar.organization=salma1-spec
  #           -Dsonar.sources=src
  #           -Dsonar.branch.name=main

  # sca-scan:
  #   runs-on: ubuntu-latest
  #   needs: test-job
  #   timeout-minutes: 10
  #   defaults:
  #     run:
  #       working-directory: frontend-app
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run OWASP Dependency-Check
  #       uses: dependency-check/Dependency-Check_Action@main
  #       with:
  #         project: "frontend-app"
  #         path: "."
  #         format: "ALL"
  #         out: "reports"
  #         args: "--noupdate"

  #     - name: Upload dependency-check report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dependency-check-report
  #         path: reports/dependency-check-report.html

  # docker-image-scan:
  #   runs-on: ubuntu-latest
  #   needs: [sast-scan, sca-scan]
  #   timeout-minutes: 10
  #   steps:
  #     - name: Clone Source Code
  #       uses: actions/checkout@v4

  #     - name: Build Docker Image
  #       run: docker build -t ${{ env.IMAGE_NAME }} --build-arg VITE_API_URL=${{ env.VITE_API_URL }} .

  #     - name: Scan Docker Image with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.IMAGE_NAME }}
  #         format: table
  #         exit-code: 0
  #         ignore-unfixed: true

  build-and-push-job:
    runs-on: ubuntu-latest
    needs: test-job
    timeout-minutes: 10
    steps:
      - name: Clone Source Code 
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} --build-arg VITE_API_URL=${{ env.VITE_API_URL }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker Image with Specific Version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}
      
      - name: Push Docker Image with Specific Version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Tag Docker Image with Latest Version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image with Latest Version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  zap_scan:
    name: Run OWASP ZAP DAST
    runs-on: ubuntu-latest

    steps:
      - name: ZAP Scan - Render App
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://salma-store.onrender.com'
          format: 'HTML'
          cmd_options: '-a'  # active scan (plus profond)
          fail_action: false  # n'√©choue pas si vuln√©rabilit√©s d√©tect√©es

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP Security Report
          path: report.html

  # notify:
  #   needs: build-and-push-job
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Send notification email
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: smtp.gmail.com
  #         server_port: 465
  #         username: ${{ secrets.EMAIL_USERNAME }}
  #         password: ${{ secrets.EMAIL_PASSWORD }}
  #         subject: "‚úÖ Pipeline GitHub Actions termin√© avec succ√®s"
  #         body: |
  #           Bonjour,
            
  #           Le pipeline GitHub Actions s'est termin√© avec succ√®s. 
  #           Toutes les √©tapes (build, test, push...) ont √©t√© ex√©cut√©es sans erreur.
            
  #           üì¶ Projet: frontend-app
  #           üïí Date: ${{ steps.date.outputs.time }}
            
  #           Cordialement,
  #           Votre bot CI/CD.
  #         to: salmagueddi5@gmail.com
  #         from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
  # scanner-lynis:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-job
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Install Lynis
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y lynis

  #     - name: Run Lynis security audit
  #       run: |
  #         mkdir -p lynis-report
  #         sudo lynis audit system --quiet --logfile lynis-report/lynis.log --report-file lynis-report/report.dat
  #     - name: Fix permissions for lynis report
  #       run: chmod -R 777 ./lynis-report
  #     - name: Upload Lynis report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lynis-report
  #         path: lynis-report/
