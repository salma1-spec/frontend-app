name: DevSecOps Pipeline frontend-app

env:
  BUILD_NUMBER: ${{ github.run_number }}
  IMAGE_NAME: frontend-image
  VITE_API_URL: https://api.36.lebondeveloppeur.net

on:
  push:
    branches:
      - main

jobs:

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --force

      - name: Run unit tests
        run: npm test

  sast-scan:
      name: Semgrep SAST Analysis
      runs-on: ubuntu-latest
      needs: test-job  
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Version explicite recommand√©e 

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep Scan
        run: semgrep ci --config=p/default --sarif --output=semgrep-results.sarif

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push-job:
    runs-on: ubuntu-latest
    needs: ["test-job"]
    steps:

      - name: Clone Source Code 
        uses: actions/checkout@v4

      - name: build docker image
        run: docker build -t ${{ env.IMAGE_NAME }} --build-arg VITE_API_URL=${{ env.VITE_API_URL }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      - name: Tag docker image with specific version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}
      
      - name: Push docker image with specific version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}


      - name: Tag docker image with latest version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push docker image with latest version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    
  deploy-job:
    runs-on: ubuntu-latest
    needs: ["build-and-push-job"]
    steps: 

      - name: connect to the VPS using SSH.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password:  ${{ secrets.VPS_PASSWORD }}

          script: | 
          
              cd /home/user/devops-scripts/app
              sudo git pull
              sudo docker-compose pull
              sudo docker-compose up -d --force-recreate --remove-orphans